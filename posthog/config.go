package posthog

import (
	"context"
	"net/http"
	"time"

	"github.com/posthog/posthog-go"
)

var (
	withoutLoggingCtxKey int

	DefaultEndpoint = "https://us.i.posthog.com"

	// The flushing interval of the client. Messages will be sent when they've
	// been queued up to the maximum batch size or when the flushing interval
	// timer triggers.
	DefaultInterval time.Duration

	// The HTTP transport used by the client, this allows an application to
	// redefine how requests are being sent at the HTTP level (for example,
	// to change the connection pooling policy).
	// If none is specified the client uses `http.DefaultTransport`.
	DefaultTransport http.RoundTripper

	// Logger used by the client to output info or error messages when that
	// are generated by background operations.
	// If none is specified the client uses a standard logger that outputs to
	// `os.Stderr`. Override this to suppress log messages.
	DefaultLogger posthog.Logger

	// Properties that will be included in every event sent by the client.
	// This is useful for adding common metadata like service name or app version across all events.
	// If a property conflict occurs, the value from DefaultEventProperties will overwrite any existing value.
	DefaultEventProperties posthog.Properties

	// The callback object that will be used by the client to notify the
	// application when messages sends to the backend API succeeded or failed.
	DefaultCallback posthog.Callback

	// The maximum number of messages that will be sent in one API call.
	// Messages will be sent when they've been queued up to the maximum batch
	// size or when the flushing interval timer triggers.
	// Note that the API will still enforce a 500KB limit on each HTTP request
	// which is independent from the number of embedded messages.
	DefaultBatchSize int

	// When set to true the client will send more frequent and detailed messages
	// to its logger.
	DefaultVerbose bool
)

// ContextWithoutLogging returns a new context with
// PostHog logging disabled for all levels.
func ContextWithoutLogging(parent context.Context) context.Context {
	if IsContextWithoutLogging(parent) {
		return parent
	}
	return context.WithValue(parent, &withoutLoggingCtxKey, struct{}{})
}

// IsContextWithoutLogging returns true if the passed
// context was returned from ContextWithoutLogging,
// which means PostHog logging disabled for all levels.
func IsContextWithoutLogging(ctx context.Context) bool {
	return ctx != nil && ctx.Value(&withoutLoggingCtxKey) != nil
}
