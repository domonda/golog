package golog

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewUUID(t *testing.T) {
	for i := 0; i < 100; i++ {
		id := NewUUID()
		idString := FormatUUID(id)
		t.Run(idString, func(t *testing.T) {
			assert.NoError(t, ValidateUUID(id), "generated UUID is valid")
			parsed, err := ParseUUID(idString)
			assert.NoError(t, err, "generated UUID can be parsed")
			assert.Equal(t, id, parsed, "parsed equal to initial UUID")
		})
	}
}

func TestParseUUID(t *testing.T) {
	tests := []struct {
		str     string
		wantId  [16]byte
		wantErr bool
	}{
		{"fd31f5ae-95da-413c-aadd-cb1163acf565", [16]byte{0xfd, 0x31, 0xf5, 0xae, 0x95, 0xda, 0x41, 0x3c, 0xaa, 0xdd, 0xcb, 0x11, 0x63, 0xac, 0xf5, 0x65}, false},
		{"ad407aa9-23d2-4feb-9338-3965727a9cc1", [16]byte{0xad, 0x40, 0x7a, 0xa9, 0x23, 0xd2, 0x4f, 0xeb, 0x93, 0x38, 0x39, 0x65, 0x72, 0x7a, 0x9c, 0xc1}, false},
		{"18652d16-f0d8-4407-8d8b-42179b0f3fde", [16]byte{0x18, 0x65, 0x2d, 0x16, 0xf0, 0xd8, 0x44, 0x07, 0x8d, 0x8b, 0x42, 0x17, 0x9b, 0x0f, 0x3f, 0xde}, false},
		{"8f2a34a2-87fe-4ee4-b822-0d551ab11e10", [16]byte{0x8f, 0x2a, 0x34, 0xa2, 0x87, 0xfe, 0x4e, 0xe4, 0xb8, 0x22, 0x0d, 0x55, 0x1a, 0xb1, 0x1e, 0x10}, false},
		{"a4c435ec-6b13-4906-b995-789f4f66cfb1", [16]byte{0xa4, 0xc4, 0x35, 0xec, 0x6b, 0x13, 0x49, 0x06, 0xb9, 0x95, 0x78, 0x9f, 0x4f, 0x66, 0xcf, 0xb1}, false},
		{"b13c3c6c-2af9-4817-aa96-49fec51366d1", [16]byte{0xb1, 0x3c, 0x3c, 0x6c, 0x2a, 0xf9, 0x48, 0x17, 0xaa, 0x96, 0x49, 0xfe, 0xc5, 0x13, 0x66, 0xd1}, false},
		{"24cef46b-40a4-4fb0-9652-02508714b39f", [16]byte{0x24, 0xce, 0xf4, 0x6b, 0x40, 0xa4, 0x4f, 0xb0, 0x96, 0x52, 0x02, 0x50, 0x87, 0x14, 0xb3, 0x9f}, false},
		{"64368265-af06-4b06-8599-a5e2f1b28a99", [16]byte{0x64, 0x36, 0x82, 0x65, 0xaf, 0x06, 0x4b, 0x06, 0x85, 0x99, 0xa5, 0xe2, 0xf1, 0xb2, 0x8a, 0x99}, false},
		{"7acca77c-2888-4b34-b6f6-7d0b4ed97ab7", [16]byte{0x7a, 0xcc, 0xa7, 0x7c, 0x28, 0x88, 0x4b, 0x34, 0xb6, 0xf6, 0x7d, 0x0b, 0x4e, 0xd9, 0x7a, 0xb7}, false},
		{"0c2bf992-d500-481a-9326-55ef391421be", [16]byte{0x0c, 0x2b, 0xf9, 0x92, 0xd5, 0x00, 0x48, 0x1a, 0x93, 0x26, 0x55, 0xef, 0x39, 0x14, 0x21, 0xbe}, false},

		{"0c2bf992-d500-481a-9326-55ef391421b", [16]byte{}, true},
		{"0c2bf992d500481a932655ef391421be", [16]byte{}, true},
		{"", [16]byte{}, true},
	}
	for _, tt := range tests {
		t.Run(tt.str, func(t *testing.T) {
			gotId, err := ParseUUID(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("ParseUUID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotId, tt.wantId) {
				t.Errorf("ParseUUID() = %v, want %v", gotId, tt.wantId)
			}
		})
	}
}
